<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>SPR_sonic_stop</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-50</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initial Speed

hspeed = 1.1;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Variaveis

// Sprites Control
playerImaStop = 0 //0 = stop, 1 = waiting, 2 = up, 3 = down
okStop = true; // Don't repeat the sprite waiting
speed_spr = 0; // Sprite speed (frames)

// Jump Control
global.playerJumpSpring = false;

// Spin Dash Control
global.playerSpinDash = false;
spinSpeed = 0;
spinSfx = 1;
spinSpr = 0.4;

// Moves Control
playerBreakL = false;
playerBreakR = false;
okBreak = true; // Don't looping break sound fx
releasedLeft = false;
releasedRight = false;

// Ramp Control
yRamp = 0;
up = 0;
down = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Sprites

SCR_sprites_player_sonic();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Sprites

SCR_sprites_player_sonic();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Gravity

SCR_physics();
SCR_physics_ramp();

if (place_free(x, y+1)) 
{
    gravity = global.valGravity;
}
else 
{
    gravity = 0;
}

// Maximum fall height
if (vspeed &gt; global.valVspeed) 
{
    vspeed = global.valVspeed;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Auto Run

if (hspeed &gt; -1 &amp;&amp; hspeed &lt; global.valSpeedMax) 
{
    hspeed += global.valSpeed;
    image_xscale = 1;
}

// Speed limit
SCR_physics_speed();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Collision Platforms

// Floor
if (!place_free(x+hspeed, y+vspeed) &amp;&amp; !place_meeting(x+hspeed, y, OBJ_collision_wall))
{
    vspeed = 0;
    global.playerJump = false;
    global.playerJumpSpring = false;
}
// Floor + Wall
if (!place_free(x, y+vspeed) &amp;&amp; place_meeting(x+hspeed, y, OBJ_collision_wall))
{
    vspeed = 0;
    global.playerJump = false;
    global.playerJumpSpring = false;
}

// Wall
if (place_meeting(x+hspeed, y, OBJ_collision_wall) &amp;&amp; !place_meeting(x+hspeed, y, OBJ_collision_roof))
{
    if (speed &gt; 0) 
    {
        hspeed -= hspeed;
    }
    playerImaStop = 0;
    okStop = false;
}

// Roof
if (place_meeting(x, y+vspeed/2, OBJ_collision_roof) &amp;&amp; !place_meeting(x+hspeed, y, OBJ_collision_wall))
{
    while (vspeed &lt; 0) 
    {
        vspeed = 0;
    }
}
// Roof wall
if (place_meeting(x+hspeed, y, OBJ_collision_roof))
{
    if (speed &gt; 0) 
    {
        hspeed -= hspeed;
    }
    gravity = global.valGravity*1.5;
    global.playerJump = true;
    playerImaStop = 0;
    okStop = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
